param(
  [String]$model,
  [String]$version,
  [string[]]$names,
  [string[]]$values
)

if ($model -eq $null -or $model -eq '') { 
  write-output 'missing model'
  exit 1
} else { 
  write-output( 'model:"{0}"' -f $model)
}

if ($version -eq $null -or $version -eq '') { 
  write-output 'missing version'
  exit 1
} else { 
  write-output( 'version:"{0}"' -f $version)
}

if ($names -eq $null -or $names -eq '' -or $values -eq $null -or $values -eq '' ){
  write-output 'missing names or versions'
  exit 1
} else { 
  if ( $names.Count -ne $values.Count) { 
    write-output 'mismatch between names and values counts'
    exit 1
  } else { 
    write-output ('processing {0} name/value pairs' -f  $names.Count)
    0..($names.Count-1)| foreach-object { 
      $cnt = $_
      write-output ('name {0} value {1}' -f  $names.get($cnt),$values.get($cnt))
    }
  }
}

$name_dirs = @()
$names | foreach-object { 
  $name = $_
  $name_dir = ('module\{0}\{1}' -f $model, $name)
  $name_dirs += $name_dir
  $name_dirs += ('{0}\config' -f $name_dir)
  $name_dirs += ('{0}\injest' -f $name_dir)
}
$_m  = ('{0}_{1}' -f $model, $version)

# flatten the dirs and subdirs into one array
# based on https://stackoverflow.com/questions/711991/flatten-array-in-powershell/712205
$core_dirs = @('modules.d', 'module', ('module\{0}' -f $model)) 
$dirs = @(@($core_dirs, $name_dirs) | foreach-object {$_})
write-output ('Creating directories: {0}' -f ($dirs -join ','))
$dirs | foreach-object {
  $path = $_
  if ($debug){
    write-output ('processing {0}' -f $path )
  }
  if ( test-path -path $path) {
    write-output ('dir exist "{0}"' -f $path ) 
    return
  } 
  write-output ('dir created "{0}"' -f $path )
  new-item -Path '.' -name $path -itemtype 'directory' |out-null
}
$blank_yaml = @"
---
# autogenerated
"@


$name_files = @()
$names |foreach-object { 
  $name = $_
  $name_files += ( 'module\{0}\{1}\injest\config.yml' -f $model, $name)
  $name_files += ( 'module\{0}\{1}\config\{1}.yml' -f $model, $name)
}
$configfile = ('modules.d\{0}.yml' -f $model )
$file_paths = @(@($configfile, $name_files) | foreach-object {$_})
$file_paths | foreach-object {
  $file_path = $_
  if (test-path -path $file_path) {
    write-output ('file exist "{0}"' -f $file_path ) 
  } else { 
    $dir = Split-Path -path $file_path -parent
    $filename = Split-Path -path $file_path -leaf
    new-item -path $dir -name $filename -itemtype 'file' -value $blank_yaml | out-null
    write-output ('file created "{0}"' -f $file_path )
  } 
}
$env:PATH="${env:PATH};c:\program files\7-zip"
$archive = 'result.tar'
# write-output "7z.exe -ttar a $archive module modules.d "
& cmd %%- /c 7z.exe -ttar a $archive module modules.d 