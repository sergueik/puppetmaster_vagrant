# -*- mode: ruby -*-
# vi: set ft=ruby :

require 'yaml'
require 'pp'

# see also: 
# https://github.com/leucos/ansible-tuto
# https://github.com/geerlingguy - numerous ansible roles
# https://github.com/dl528888/ansible-examples
# https://github.com/cmprescott/ansible-xml
# https://habr.com/ru/post/305400/ (in Russian)
# https://habr.com/ru/post/304732/ (in Russian)
debug = ENV.fetch('DEBUG', false)
debug =  true if debug =~ /^(?:true|yes|1)$/i
# with pre-2.2.6 Vagrant (e.g. with Vagrant 2.0.2) this requires vagrant-alpine plugin to be present
box_hostname = ENV.fetch('BOX_HOSTNAME', 'alpine')
node_count = ENV.fetch('NODE_COUNT', 2).to_i
basedir = (ENV.fetch('HOME','') || ENV.fetch('USERPROFILE', '')).gsub('\\', '/')
box_memory = ENV.fetch('BOX_MEMORY', '512').to_i
# NOTE: the order of provision chunks can be wrong:
# 'shell' after 'ansible'
# https://github.com/hashicorp/vagrant/issues/4877
# workaround: provision twice,
# first without setting DO_ANSIBLE,
# second round with export DO_ANSIBLE=trueexport DO_ANSIBLE=true
do_ansible = ENV.fetch('DO_ANSIBLE', false)
do_ansible = if do_ansible =~ /^(?:true|yes|1)$/i
  true
else
  false
end
dir = File.expand_path(File.dirname(__FILE__))

# overrides the setting in Vagrantfile.yaml
box_name = 'alpine39'
vagrantfile_yaml = "#{dir}/Vagrantfile.yaml"
if File.exists?(vagrantfile_yaml)
  if debug
    puts "Loading '#{vagrantfile_yaml}'"
  end
  config_yaml = YAML::load_file( vagrantfile_yaml )
  if box_name !~ /\S/
    box_config = config_yaml[config_yaml[:boot]]
    box_name = box_config[:box_name]
  else
    box_config = config_yaml[box_name]
  end
  box_cpus = box_config[:box_cpus].to_i
  box_memory = box_config[:box_memory].to_i
  if debug
    pp box_config
  end
end

BOX_URL = 'https://app.vagrantup.com/generic/boxes/alpine39/versions/3.0.10/providers/virtualbox.box'

VAGRANTFILE_API_VERSION = '2'

instance_name_prefix = 'node'
instance_ip_common = '192.168.51'
hosts_data = []
inventory_data = []
1.upto(node_count) do |n|
  node_hostname = '%s%d' % [instance_name_prefix, n]
  node_ip = '%s.%02d' % [instance_ip_common, n + 9 ]
  hosts_data.push "#{node_ip} #{node_hostname}"
  inventory_data.push "#{node_hostname} ansible_ssh_host=#{node_ip} ansible_python_interpreter=/usr/bin/python3"
end
# controller: install ansible
shell_script1 = <<-SHELL
  # NOTE: avoid specifying release too strict
  echo 'controller: install ansible'
  PACKAGES='python3~=3.6 rsync jq xmlstarlet~=1.6.1 bash curl ansible~=2.7.17'
  sudo apk update
  sudo apk del python3
  apk add --update --no-cache $PACKAGES virtualbox-guest-additions
  # may need:
  # sudo pip install pyyaml jinja2
  sudo rm -rf /var/cache/apk/*
  sudo apk add
  sudo sh -c "echo vboxguest >> /etc/modules"
  sudo sed -i '/ipv6/d' /etc/modules
  sudo echo "#{hosts_data.join("\n")}" | tee -a '/etc/hosts'
SHELL
# controller: get ready to run ansible
# based on: https://gist.github.com/tknerr/291b765df23845e56a29
# set up SSH public-key authentication to mutually connect from node to node
# NOTE: .vagrant/machines/$target_node/virtualbox/private_key is a PEM RSA private key for that node
shell_script2 = <<-SHELL
  echo 'controller: get ready to run ansible'
  if [ ! -f /home/vagrant/.ssh/id_rsa ]; then
    echo 'controller: create ssh keys'
    wget --no-check-certificate https://raw.githubusercontent.com/hashicorp/vagrant/master/keys/vagrant -O /home/vagrant/.ssh/id_rsa
    wget --no-check-certificate https://raw.githubusercontent.com/hashicorp/vagrant/master/keys/vagrant.pub -O /home/vagrant/.ssh/id_rsa.pub
    cat ~/.ssh/id_rsa.pub >> ~/.ssh/authorized_keys
    chmod 600 /home/vagrant/.ssh/id_*
  fi
  echo 'controller: create inventory'
  rm -rf /tmp/provisioning
  mkdir /tmp/provisioning
  cp /vagrant/playbook.yml /tmp/provisioning
  cd /tmp/provisioning
  touch inventory
  echo "#{inventory_data.join("\n")}" | tee -a inventory
  chmod -x inventory
SHELL
# conroller: run ansible
shell_script3 = <<-SHELL
  echo 'conroller: run ansible'
  cd /tmp/provisioning
  export ANSIBLE_HOST_KEY_CHECKING=False
  ansible -m ping all  -i inventory
  ansible-playbook playbook.yml --inventory-file=inventory
SHELL
Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|
  config.vm.box =  box_name
  config_vm_box_name =  'alpine39.box'

  config.vm.box_url = "file://#{basedir}/Downloads/#{config_vm_box_name}"
  # https://www.vagrantup.com/docs/multi-machine
  1.upto(node_count) do |n|
    # node_hostname = "node#{n}"
    # node_ip = "192.168.51.#{9+n}"
    node_hostname = '%s%d' % [instance_name_prefix, n]
    node_ip = '%s.%02d' % [instance_ip_common, n + 9 ]
    config.vm.define node_hostname do |box|
      # only required for
      config.vm.boot_timeout = 600
      config.vm.provider :virtualbox do |v|
        v.customize ['modifyvm', :id, '--cableconnected1', 'on']
        v.customize ['modifyvm', :id, '--memory', box_memory ]
      end

      config.vm.synced_folder './' , '/vagrant'
      config.vm.box_url = "file://#{basedir}/Downloads/#{config_vm_box_name}"
      box.vm.hostname = node_hostname
      box.vm.network "private_network", ip: node_ip
      box.vm.provision 'shell', env: { 'NODE_IP' => node_ip  }, inline: shell_script1


      if do_ansible
        if ! Vagrant.has_plugin?('vagrant-alpine')
          raise 'Need Vagrant plugin "vagrant-alpine"'
        end
        # https://docs.ansible.com/ansible/latest/user_guide/playbooks_intro.html
        # https://github.com/ansible/ansible-examples
        # https://github.com/salecharohit/vagrant-ansible-alpine-docker
        # see also: https://github.com/fulgorek/vagrant-ansible-docker-alpine
        # https://habr.com/ru/company/selectel/blog/196620/ (in Russian)
        config.vm.provision 'ansible' do |ansible|
          ansible.playbook = 'playbook.yml'
          ansible.verbose = true
          ansible.limit = 'all'
          # ERROR! Specified hosts and/or --limit does not match any hosts
          # Ansible failed to complete successfully. Any error output should be
          # visible above. Please fix these errors and try again:
          # ansible.inventory_path = 'inventory'
          ansible.raw_arguments = ['--flush-cache']
          # ansible.verbose = "-vvvv"
          # ansible.verbose = "-vvv"
          ansible.verbose = "-vv"
          # the default
          # ansible.verbose = "-v"
        end
      end
      puts 'run shell script 1'
      box.vm.provision 'shell', env: { 'NODE_IP' => node_ip  }, inline: shell_script1
      # controller: get ready to run ansible
      puts 'run shell script 2'
      box.vm.provision 'shell', env: { 'NODE_IP' => node_ip  }, inline: shell_script2
      # controller: run ansible
      puts 'run shell script 3'
      box.vm.provision 'shell', env: { 'NODE_IP' => node_ip  }, inline: shell_script3
      puts 'all done'
      # https://github.com/jaimegildesagredo/server-expects
    end
  end
end

