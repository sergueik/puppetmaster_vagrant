---
urugeas::version: '0.2.3'
urugeas::undef_value: ~
urugeas::empty_value: ''
urugeas::setting: On
urugeas::defined_check::dummy_defined: 'yes'
# suppress running augool during augeas resource testing and vice versa
urugeas::exercise_tomcat_security_change: false
urugeas::exercise_augtool: true
# the shell command will be eventually embedded in a Jenkins job config.xml as CDATA section but here is it just a plain shell script
# so the ampersand, quotes, greater and less would be escaped
urugeas::shell_build_command: '# some curl command with output captured to $LOG_FILE'
urugeas::rest_command_payload_fragment:  |
  PAYLOAD=$(cat<<END|jq -c '.'
  {
    "repo": "${REPO}",
    "app" : "${APP}",
    "commands": [
      {
        "${SERVCE_NAME}": "stop",
      }
    ],
    "filter": {
      "node": "${NODE}",
      "datacenter": "${DATCENTER}",
     }
  }
  echo "PAYLOAD=${PAYLOAD}"
  END
  )
  # if there is a requirement to echo the command
  PAYLOAD_DISPAY=$(echo $PAYLOAD | sed 's/"/\\' )
  # example usage:
  # curl -# -X POST -H 'Content-Type: application/json' -d "$PAYLOAD" -k $URL

# NOTE: preserve a blank line above

urugeas::shell_command:  |
  MAX_RETRY= %{hiera('urugeas::max_retry')}
  TRY=$MAX_RETRY
  while [[ $TRY != 0 ]] ; do
    %{hiera('urugeas::shell_build_command')}
    # fatal errors quit immediately
    if [ ! -z "$FATAL_ERROR_PATTERNS_REGEXP" ]
    then
      grep -qiE "$FATAL_ERROR_PATTERNS_REGEXP" $LOG_FILE > /dev/null
      if [[ $? -eq 0 ]]
      then
        echo 'There was a fatal error:'
        grep -iE "$FATAL_ERROR_PATTERNS_REGEXP" $LOG_FILE
        echo 'Aborting'
        exit 1
      fi
    fi
    # non-fatal errors retry and do not set status toa failure
    ERROR_DETECTED=false
    grep -qiE "$ERROR_PATTERNS_REGEXP" $LOG_FILE > /dev/null
    if [[ $? -eq 0 ]]
    then
      ERROR_DETECTED=true
    fi
    if $ERROR_DETECTED
    then
      echo 'There was a non-fatal error:'
      grep -iE "$ERROR_PATTERNS_REGEXP" $LOG_FILE
      TRY=$(expr $TRY - 1)
      TRY_COUNT=$(expr $MAX_RETRY - $TRY)
      echo "ERROR: RETRY $TRY_COUNT"
    else
      TRY=0
    fi
  done

# NOTE: preserve a blank line above

uruseas::apache_log:  |
  {
    "@vips": [
      "%v"
    ],
    "@source": "%v%U%q",
    "@source_host": "%v",
    "@source_path": "%f",
    "@tags": [
      "Apache",
      "Access"
    ],
    "@message": "%h %l %u %t \"%r\" %>s %b",
    "@fields": {
      "timestamp": "%{%Y-%m-%dT%H:%M:%S%z}t",
      "clientip": "%a",
      "duration": "%D",
      "status": "%>s",
      "request": "%U%q",
      "urlpath": "%U",
      "urlquery": "%q",
      "method": "%m",
      "referer": "%{Referer}i",
      "user-agent": "%{User-agent}i",
      "bytes": "%B"
    }
  }

urugeas::dbuser: 'dbuser'
urugeas::command_template: "mysql -H ${HOST} -u %{hiera('urugeas::dbuser')} -D database -e \"query\""
urugeas::error_patterns:
  - 'end of file reached'
  - 'failed to generate additional resource'
  - 'encountered end of file'
  - 'failed to list packages'
  - 'retrieving certificate failed'

urugeas::fatal_error_patterns:
  - 'fatal error'

urugeas::augeas_testing:
  - set 'useSecurity/#text' 'false'
  - set 'port/#text' '8000'
  - set 'securityRealm/#attribute/class' 'example attribute'
  - insert 'test' before 'securityRealm/authContext' # add node
  - set 'securityRealm/test/#attribute/class' 'test class' # set attribute
  - set 'securityRealm/test/#text' 'test text' # set text
# - clear 'securityRealm/authContext' # this operation does not appear to work
# - rm 'securityRealm/authContext' # this will work, commented for exrcise

urugeas::tomcat_security_part1:
  - insert 'filter-mapping' before 'securityRealm/authContext'
  - set 'securityRealm/filter-mapping/filter-name/#text' 'httpHeaderSecurity'
  - set 'securityRealm/filter-mapping/url-pattern/#text' '/*'
  - set 'securityRealm/filter-mapping/dispatcher/#text' 'REQUEST'

urugeas::tomcat_security_part2:
  - insert 'filter' before 'securityRealm/authContext'
  - set 'securityRealm/filter/filter-name/#text' 'httpHeaderSecurity'
  - set 'securityRealm/filter/filter-class/#text' 'org.apache.catalina.filters.HttpHeaderSecurityFilter'
  - set 'securityRealm/filter/async-supported/#text' 'true'
  - insert 'init-param' after 'securityRealm/filter/async-supported'
  - set 'securityRealm/filter/init-param/param-name/#text' 'antiClickJackingEnabled'
  - set 'securityRealm/filter/init-param/param-value/#text' 'true'
  - insert 'init-param' after 'securityRealm/filter/async-supported'
  - set 'securityRealm/filter/init-param[1]/param-name/#text' 'antiClickJackingOption'
  - set 'securityRealm/filter/init-param[1]/param-value/#text' 'SAMEORIGIN'

urugeas::param1:
  - 'one'
  - 'two'
  - 'three'

urugeas::param2: "%{alias('urugeas::param1')}"
urugeas::param3: "%{hiera('urugeas::param1')}"
urugeas::jetty_mod::headers:
  'Content-Security-Policy': "frame-ancestors 'self' *.stackoverflow.com"
  'X-Frame-Options': 'SAMEORIGIN'
urugeas::source_encoding: 'UTF-8'
urugeas::java_options:  |
  -Dfile.encoding=%{hiera('urugeas::source_encoding')} \
  -DAPP_LOG_ROOT=/var/log \

# NOTE: need a blank line above
urugeas::job::debug: false
urugeas::job::logdir_glob: 'log*'
urugeas::job::current_logdir: 'log10'
urugeas::job::number_logdirs_to_keep: 5
urugeas::job::build_user: 'vagrant'
# works fine in clean provision ?
mysql::params::custom_datadir: '/opt/mysql/var/lib/mysql'
mysql::params::default_datadir: '/var/lib/mysql'
mysql::params::datadir: "%{hiera('mysql::params::default_datadir')}"
mysql::params::socket:  "%{hiera('mysql::params::datadir')}/mysql.sock"
mysql::params::user: 'mysql'
urugeas::mysql::migrate_datadir: true
